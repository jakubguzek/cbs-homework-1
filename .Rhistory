knitr::opts_chunk$set(echo = TRUE)
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
}}
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
}}
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
}}
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
})
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
})
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
colors <- colorRampPalette(c("purple", "white", "orange"))(n = 500)
if (file_test("-f", "./bottomly.Rdata")) {
load(file = "./bottomly.Rdata")
} else {
con <- url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file = con)
close(con)
save(bottomly.eset, file = "bottomly.Rdata")
}
expression_data <- as.matrix(exprs(bottomly.eset))
dim(expression_data)
expression_data[1:5, 1:10] # take a look at the data
expression_data <- expression_data[rowMeans(expression_data) > 10, ]
expression_data <- log2(as.matrix(expression_data) + 1)
# png("Guzek_problem1.png", height = 700, width = 700)
heatmap.2(expression_data,
# Should be clustered both by columns and rows by default
main = "Guzek_problem1.png",
notecol = "black",
density.info = "none",
trace = "none",
margin = c(12, 9),
col = colors,
dendrogram = "column", # Draw dendrogram only for columns
scale = "column", # Scale heatmap in the column direction
)
# dev.off()
svd.out <- svd(t(scale(t(expression_data), scale = FALSE, center = TRUE)))
print(paste("Dimension of left singular vectors:", dim(svd.out$u)))
print(paste("Length of singular values:", length(svd.out$d)))
print(paste("Dimension of right singular vectors:", dim(svd.out$v)))
par(mfrow = c(1, 2))
plot(svd.out$d, pch = 20, ylab = "Singluar value")
plot(svd.out$d^2 / sum(svd.out$d^2) * 100, pch = 20, ylab = "% variance explained")
plot(1:ncol(expression_data), svd.out$v[, 1], pch = 20)
plot(1:ncol(expression_data), svd.out$v[, 2], pch = 20)
plot(1:ncol(expression_data), svd.out$v[, 3], pch = 20)
PC <- data.table(svd.out$v, pData(bottomly.eset))
# # pdf("Guzek_problem2.pdf", width = 8, height = 5)
# I tried creating those plots in a for loop but it didn't work for some reason
# ggplot(PC) +  geom_point(aes(x=V1, y=V2, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V3, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V1, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V6, col=as.factor(strain)))
ggplot(PC) +
geom_point(aes(x = V2, y = V3, col = as.factor(strain))) +
scale_color_manual(values = c("orange", "purple")) +
labs(title = "Guzek_problem2") # best separation
# ggplot(PC) +  geom_point(aes(x=V2, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V5, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V3, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V5, y=V6, col=as.factor(strain)))
# dev.off()
# pdf("Guzek_problem3.pdf", width = 16, height = 9)
par(mfrow = c(1, 2))
plot(svd.out$u[, 1], pch = 20)
plot(svd.out$u[, 2], pch = 20)
mtext("Guzek_problem3", side = 3, line = -2, outer = TRUE)
# dev.off()
loadings <- data.table(svd.out$u, pData(bottomly.eset))
# png("Guzek_problem4.png", width = 800, height = 500)
V1 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V1), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V2 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V2), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V3 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V3), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V4 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V4), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V5 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V5), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
figure <- ggarrange(ggarrange(V1, V2, V3, labels = c("V1", "V2", "V3"), ncol = 3, nrow = 1), ggarrange(V4, V5, labels = c("V4", "V5"), ncol = 2, nrow = 1), ncol = 1, nrow = 2) + labs(title="Guzek_problem4")
annotate_figure(figure, top = text_grob("Guzek_problem4"))
# dev.off()
set.seed(1)
tsne_output <- Rtsne(expression_data, pca = FALSE, preplexity = 60)
tsne_output <- data.table(tsne_output$Y)
clusters <- kmeans(expression_data, centers = 5)
# pdf("Guzek_problem5.pdf", width = 8, height = 5)
tsne_clustered <- data.table(expression_data, tsne_output, keep.rownames = TRUE)
ggplot(tsne_clustered) +
geom_point(aes(x = V1, y = V2, col = clusters$cluster)) +
scale_color_distiller(palette = "Spectral") +
labs(title = ("Guzek_problem5"))
# dev.off()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(Biobase)
library(RColorBrewer)
library(gplots)
library(data.table)
library(tidyverse)
library(qvalue)
library(ggpubr)
library(irlba)
library(Rtsne)
})
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
colors <- colorRampPalette(c("purple", "white", "orange"))(n = 500)
if (file_test("-f", "./bottomly.Rdata")) {
load(file = "./bottomly.Rdata")
} else {
con <- url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file = con)
close(con)
save(bottomly.eset, file = "bottomly.Rdata")
}
expression_data <- as.matrix(exprs(bottomly.eset))
dim(expression_data)
expression_data[1:5, 1:10] # take a look at the data
expression_data <- expression_data[rowMeans(expression_data) > 10, ]
expression_data <- log2(as.matrix(expression_data) + 1)
png("Guzek_problem1.png", height = 700, width = 700)
heatmap.2(expression_data,
# Should be clustered both by columns and rows by default
main = "Guzek_problem1.png",
notecol = "black",
density.info = "none",
trace = "none",
margin = c(12, 9),
col = colors,
dendrogram = "column", # Draw dendrogram only for columns
scale = "column", # Scale heatmap in the column direction
)
dev.off()
svd.out <- svd(t(scale(t(expression_data), scale = FALSE, center = TRUE)))
print(paste("Dimension of left singular vectors:", dim(svd.out$u)))
print(paste("Length of singular values:", length(svd.out$d)))
print(paste("Dimension of right singular vectors:", dim(svd.out$v)))
par(mfrow = c(1, 2))
plot(svd.out$d, pch = 20, ylab = "Singluar value")
plot(svd.out$d^2 / sum(svd.out$d^2) * 100, pch = 20, ylab = "% variance explained")
plot(1:ncol(expression_data), svd.out$v[, 1], pch = 20)
plot(1:ncol(expression_data), svd.out$v[, 2], pch = 20)
plot(1:ncol(expression_data), svd.out$v[, 3], pch = 20)
PC <- data.table(svd.out$v, pData(bottomly.eset))
pdf("Guzek_problem2.pdf", width = 8, height = 5)
# I tried creating those plots in a for loop but it didn't work for some reason
# ggplot(PC) +  geom_point(aes(x=V1, y=V2, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V3, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V1, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V1, y=V6, col=as.factor(strain)))
ggplot(PC) +
geom_point(aes(x = V2, y = V3, col = as.factor(strain))) +
scale_color_manual(values = c("orange", "purple")) +
labs(title = "Guzek_problem2") # best separation
# ggplot(PC) +  geom_point(aes(x=V2, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V2, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V4, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V3, y=V5, col=as.factor(strain))) # goodish separation
# ggplot(PC) +  geom_point(aes(x=V3, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V5, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V4, y=V6, col=as.factor(strain)))
# ggplot(PC) +  geom_point(aes(x=V5, y=V6, col=as.factor(strain)))
dev.off()
pdf("Guzek_problem3.pdf", width = 16, height = 9)
par(mfrow = c(1, 2))
plot(svd.out$u[, 1], pch = 20)
plot(svd.out$u[, 2], pch = 20)
mtext("Guzek_problem3", side = 3, line = -2, outer = TRUE)
dev.off()
loadings <- data.table(svd.out$u, pData(bottomly.eset))
png("Guzek_problem4.png", width = 800, height = 500)
V1 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V1), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V2 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V2), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V3 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V3), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V4 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V4), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
V5 <- ggplot(loadings) +
geom_violin(aes(x = as.factor(strain), y = V5), draw_quantiles = c(0.25, 0.50, 0.75)) +
xlab("Strain")
figure <- ggarrange(ggarrange(V1, V2, V3, labels = c("V1", "V2", "V3"), ncol = 3, nrow = 1), ggarrange(V4, V5, labels = c("V4", "V5"), ncol = 2, nrow = 1), ncol = 1, nrow = 2) + labs(title="Guzek_problem4")
annotate_figure(figure, top = text_grob("Guzek_problem4"))
dev.off()
set.seed(1)
tsne_output <- Rtsne(expression_data, pca = FALSE, preplexity = 60)
tsne_output <- data.table(tsne_output$Y)
clusters <- kmeans(expression_data, centers = 5)
pdf("Guzek_problem5.pdf", width = 8, height = 5)
tsne_clustered <- data.table(expression_data, tsne_output, keep.rownames = TRUE)
ggplot(tsne_clustered) +
geom_point(aes(x = V1, y = V2, col = clusters$cluster)) +
scale_color_distiller(palette = "Spectral") +
labs(title = ("Guzek_problem5"))
dev.off()
? GEOQuery
? GEOquery
library(GEOquery)
?GEOquery
??GEOQuery
library(GEOquery)
data  <- getGEO("GSE223430", destdir=".")
data
data
class(data)
data[1]
data[2]
data$$phenoData
data$phenoData
Meta(data)
data <- getGEO("./GPL6246.soft.gz")
data <- getGEO(filename="./GPL6246.soft.gz")
data
class(data)
Meta(data)
quit()
library(GEOquery)
edata <- getGEO(filename="./GPL66246.soft.gz")
edata <- getGEO(filename="./GPL66246.soft.gz")
knitr::opts_chunk$set(echo = TRUE)
library(GEOquery)
if (file_test("-f", "./GPL6246.soft.gz")) {
edata <- geoGEO(filename = "./GPL6246.soft.gz")
} else {
getGEO("GPL6246", destdir = ".")
}
library(GEOquery)
if (file_test("-f", "./GPL6246.soft.gz")) {
edata <- getGEO(filename = "./GPL6246.soft.gz")
} else {
getGEO("GPL6246", destdir = ".")
}
library(GEOquery)
# If data is in current directory, load it, else download it
if (file_test("-f", "./GPL6246.soft.gz")) {
# Load the data into edaat
edata <- getGEO(filename = "./GPL6246.soft.gz")
} else {
# Download the data if it's now in current dir
getGEO("GPL6246", destdir = ".")
# Load the data into edata sample
edata <- getGEO(filename = "./GPL6246.soft.gz")
}
edata
class(edata)
Meta(edata)
Meta(edata)$sample_id
? if
? getGEO
knitr::opts_chunk$set(echo = TRUE)
clusters <- kmeans(expression_data, centers = 5)
cluster
class(edata)
# Use Meta method from the GEOquery library to look at the metadata
Meta(edata)
list.celfiles("./")
class(edata)
# Use Meta method from the GEOquery library to look at the metadata
Meta(edata)
edata <- getGEO("./GSE223430_series_matrix.txt.gz")
edata <- getGEO(filename = "./GSE223430_series_matrix.txt.gz")
edata
edata.phenoData
edata$phenoData
edata
edata[0]
edata[0]
edata[0]
edata[1]
edata[2]
edata[3]
edata[3]
edata[3]
edata[3, 1]
edata[1]
edata[0]
Meta(edata)
if (file_test("-f", "./bottomly.Rdata")) {
load(file = "./bottomly.Rdata")
} else {
con <- url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file = con)
close(con)
save(bottomly.eset, file = "bottomly.Rdata")
}
class(expression_data)
class(bottomly.eset)
exprs(edata)
? ExpressionData
(edata)
? ExpressionSet
varMetadata(edata)
readSdrf(edata)
